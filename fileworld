#!/usr/bin/env python
"""
awsd - movement
space - jump
mouse - look around
"""
import numpy as np
import os

import direct.directbase.DirectStart
# from pandac.PandaModules import *
from panda3d.core import Vec3, CollisionTraverser, CollisionHandlerPusher, TextNode, NodePath, AmbientLight, CollisionNode, CollisionRay, BitMask32, CollisionHandlerQueue, WindowProperties
from direct.gui.OnscreenText import OnscreenText
import sys

floorraise = 0.01 # step every smaller scene up by a tiny amount to make floors separate
x_separation = 5
DEFAULT_CHILD_SCALE = 0.1
DEFAULT_SIBLINGS_SCALE = 1. # current room has scale 1

def as_dir(path_list):
    dir_ = '/'.join(path_list)
    dir_ = dir_.replace("//", "/")
    return dir_

def child_index_to_grid(i, n):
    """ i: child index [0-n-1]
        n: # of children
    inside a 'house', we have 3 x 3 spots for 100 x 100 space, at 1/10th scale 
    possible resolutions are
    100 : 3x3 : 1/10
        : 4x4 : ?
        : 5x5 : ?
        ...

    we always need more spaces than we have children, so with 45 children you need 7x7=49 spots
    -> N = ceil(sqrt(n))

    grid is a point grid (example N=3)
     + + +
     + + +
     + + +
     ----- 100m

    scale - grid_N -cell_size
    1/10    3       50m (100 / (3-1))
    ?       4       33m (100 / (4-1))
    ...
    scale for ? is 1/10 * (3-1) / (4-1)

    """
    if i is None:
        raise ValueError
    scale = DEFAULT_CHILD_SCALE
    if n == 1:
        xy = np.array([0, 0])
        ij = np.array([0, 0])
    else:
        grid_N = int(np.ceil(np.sqrt(n)))
        grid_origin_m = np.array([-x_separation, -x_separation]) # xy pos of ij = [0, 0] grid cell
        grid_size_m = np.array([2*x_separation, 2*x_separation]) # size of grid in meters
        cell_size_m = grid_size_m / (grid_N - 1)
        if n > 9:
            scale = DEFAULT_CHILD_SCALE * (3-1) / (grid_N-1)
        grid_indices = np.array(np.where(np.ones((grid_N, grid_N)))).T
        ij = grid_indices[i]
        xy = ij * cell_size_m + grid_origin_m
    return xy, ij, scale

def sibling_index_to_grid(i, ci, n):
    """ siblings have a scale fixed to 1., instead, it is the parent scale that must increase to 
    satisfy the parent-child scale for siblings
    in addition, the current folder must be at 0, 0, which means all siblings have to move to satisfy this
    """
    xy, ij, child_scale = child_index_to_grid(i, n)
    cxy, _, _ = child_index_to_grid(ci, n)
    parent_scale = 1. / child_scale
    xy = (xy - cxy) * parent_scale
    parent_xy = -cxy * parent_scale
    return xy, ij, parent_scale, parent_xy

class FPS(object):
    """
        This is a very simple FPS like -
         a building block of any game i guess
    """
    current_folder = ['/', 'home', 'daniel']
    in_cutscene = None
    parent_room_node = None
    current_selection = None
    siblings_room_nodes = {}
    children_room_nodes = {}

    def __init__(self):
        """ create a FPS type game """
        self.init_collision()
        self.cf_text_node = OnscreenText(text="Fileworld", style=1, fg=(1,1,1,1),
                    pos=(1.3,-0.95), align=TextNode.ARight, scale = .07)
        self.sf_text_node = OnscreenText(text="Fileworld", style=1, fg=(1,1,1,1),
                    pos=(1.3,-0.85), align=TextNode.ARight, scale = .07)
        OnscreenText(text=__doc__, style=1, fg=(1,1,1,1),
            pos=(-1.3, 0.95), align=TextNode.ALeft, scale = .05)
        self.load_level()
        self.init_player()
        base.accept( "escape" , sys.exit)
        base.accept( "mouse1" , self.enter_current_selection)
        base.disableMouse()

        # hide mouse cursor, comment these 3 lines to see the cursor
        props = WindowProperties()
        props.setCursorHidden(True)
        base.win.requestProperties(props)

        # init game loop task
        taskMgr.add(self.game_loop, 'gameloop-task')

        base.run()


    def init_collision(self):
        """ create the collision system """
        base.cTrav = CollisionTraverser()
        base.pusher = CollisionHandlerPusher()

    def regen_scenes_for_current_folder(self):
        # delete previous
        if self.parent_room_node is not None:
            self.parent_room_node.removeNode()
        for c, v in self.siblings_room_nodes.items():
            v.removeNode()
        for c, v in self.children_room_nodes.items():
            v.removeNode()

        # sibling room scenes (children of parent)
        # current room is one of those (I am the child of my parents)
        self.parent_scale = 1. / DEFAULT_CHILD_SCALE
        if len(self.current_folder) == 1:
            siblings = [self.current_folder[-1]]
        else:
            parentdir = as_dir(self.current_folder[:-1])
            siblingdirs = sorted([f.name for f in os.scandir(parentdir) if f.is_dir()])
            siblings = siblingdirs
        self.siblings_room_nodes = {c: None for c in siblings}
        ci = self.get_current_room_sibling_index()
        parent_xy = [0, 0]
        for i, c in enumerate(siblings):
            self.siblings_scale = DEFAULT_SIBLINGS_SCALE
            scale = DEFAULT_SIBLINGS_SCALE
            z_offset = 0
            xy, _, self.parent_scale, parent_xy = sibling_index_to_grid(i, ci, len(siblings))
            self.siblings_room_nodes[c] = loader.loadModel('house.bam')
            self.siblings_room_nodes[c].reparentTo(render)
            self.siblings_room_nodes[c].setTwoSided(True)
            self.siblings_room_nodes[c].setScale(scale, scale, scale)
            self.siblings_room_nodes[c].setPos(xy[0], xy[1], z_offset)
            text = TextNode(c)
            text.setText(c)
            text3d = NodePath(text)
            text3d.reparentTo(self.siblings_room_nodes[c])
            text3d.setScale(-1,1,1)
            text3d.setPos(0,11,5)
            text3d.setTwoSided(True)

        # create parent room scene (larger)
        if len(self.current_folder) == 1:
            # can't create parent, as there is nothing above '/'
            z_offset = - floorraise
            dummy_grass_node = render.attachNewNode("Dummy Grass Node")
            grass_node = loader.loadModel('models/environment')
            grass_node.reparentTo(dummy_grass_node)
            grass_node.setPos(0, 0, -1)
            self.parent_room_node = dummy_grass_node
            self.parent_room_node.setTwoSided(True)
            self.parent_room_node.setScale(self.parent_scale, self.parent_scale, self.parent_scale)
            self.parent_room_node.setPos(0, 0, z_offset)
        else:
            c = self.current_folder[-2]
            z_offset = - floorraise
            self.parent_room_node = loader.loadModel('house.bam')
            self.parent_room_node.reparentTo(render)
            self.parent_room_node.setTwoSided(True)
            self.parent_room_node.setScale(self.parent_scale, self.parent_scale, self.parent_scale)
            self.parent_room_node.setPos(parent_xy[0], parent_xy[1], z_offset)
            text = TextNode(c)
            text.setText(c)
            text3d = NodePath(text)
            text3d.reparentTo(self.parent_room_node)
            text3d.setScale(-1,1,1)
            text3d.setPos(0,11,5)
            text3d.setTwoSided(True)
            #grandparent (for distant vision)
#             grandparent_node = loader.loadModel('house.bam')
#             grandparent_node.reparentTo(self.parent_room_node)
#             grandparent_node.setPos(0, 100, -1)
#             grandparent_node.setScale(20, 20, 20)
#             grandparent_node.setH(90)
#             grandcousin_node = loader.loadModel('house.bam')
#             grandcousin_node.reparentTo(grandparent_node)
#             grandcousin_node.setScale(0.05, 0.05, 0.05)

        # child room scenes, smaller
        self.children_scale = 0.1
        currentdir = as_dir(self.current_folder)
        childrendir = sorted([f.name for f in os.scandir(currentdir) if f.is_dir()])
        children = childrendir
        self.children_room_nodes = {c: None for c in children}
        for i, c in enumerate(children):
            z_offset = + floorraise
            xy, _, scale = child_index_to_grid(i, len(children))
            self.children_scale = scale
            self.children_room_nodes[c] = loader.loadModel('house.bam')
            self.children_room_nodes[c].reparentTo(render)
            self.children_room_nodes[c].setTwoSided(True)
            self.children_room_nodes[c].setScale(scale, scale, scale)
            self.children_room_nodes[c].setPos(xy[0], xy[1], z_offset)
            text = TextNode(c)
            text.setText(c)
            text3d = NodePath(text)
            text3d.reparentTo(self.children_room_nodes[c])
            text3d.setScale(-1,1,1)
            text3d.setPos(0,11,5)
            text3d.setTwoSided(True)

        self.cf_text_node.setText(as_dir(self.current_folder))

    def closestChildUpdate(self):
        """ highlights the closest child to player """
        player_pos = self.player.node.getPos()
        min_dist = 5.
        closest = None
        for i, (name, node) in enumerate(self.children_room_nodes.items()):
            node.clearColorScale()
            pos = node.getPos()
            dist = (pos - player_pos).length()
            if dist <= min_dist:
                min_dist = dist
                closest = name
        self.sf_text_node.setText("")
        if closest is not None:
            # highlight closest
            # TODO
            self.children_room_nodes[closest].setColorScale(10, 10, 10, 10)
        else:
            if len(self.current_folder) > 1:
                closest = ".."
        self.current_selection = closest
        self.sf_text_node.setText(str(closest))

    def get_current_room_sibling_index(self):
        ci = None
        for i, (name, node) in enumerate(self.siblings_room_nodes.items()):
            if name == self.current_folder[-1]:
                ci = i
        if len(self.siblings_room_nodes.items()) != 0 and ci is None:
            raise ValueError
        return ci

    def load_level(self):
        """ load the self.level
            must have
            <Group> *something* {
              <Collide> { Polyset keep descend }
            in the egg file
        """
        self.scenes = [None for i in range(20)]



        self.regen_scenes_for_current_folder()


        ambientLight = AmbientLight('ambientLight')
        ambientLight.setColor((0.3, 0.3, 0.3, 1))
        ambientLightNP = render.attachNewNode(ambientLight)
        render.setLight(ambientLightNP)
        render.set_shader_auto()

        # light
        ambientLight = AmbientLight('ambientLight')
        ambientLight.setColor((0.3, 0.3, 0.3, 1))
        ambientLightNP = render.attachNewNode(ambientLight)
        render.setLight(ambientLightNP)
        render.set_shader_auto()

    def init_player(self):
        """ loads the player and creates all the controls for him"""
        self.player = Player()

    def get_current_room_depth(self):
        return len(self.current_folder)

    def enter_current_selection(self):
        if self.current_selection is None:
            return
        elif self.current_selection == "..":
            self.scale_player_up()
        else:
            self.scale_player_down(self.current_selection)


    def scale_player_down(self, child_to_enter):
        # check permission
        try:
            os.scandir(as_dir(self.current_folder + [child_to_enter]))
        except PermissionError as e:
            print(e)
            return
        player_pos = self.player.node.getPos()
        self.in_cutscene = {"name": "scale_down", "t0_player_pos": player_pos, "child_to_enter": child_to_enter, "t": 0, "duration": 1}

    def scale_player_up(self):
        player_pos = self.player.node.getPos()
        self.in_cutscene = {"name": "scale_up", "t0_player_pos": player_pos, "t": 0, "duration": 1}

    def cutscene_update(self):
        if self.in_cutscene["name"] == "scale_up":
            # to scale up player, we scale down world
            t0_player_pos = self.in_cutscene["t0_player_pos"]
            T = self.in_cutscene["duration"]
            t = self.in_cutscene["t"]
            # scale factor (1 to 0.1)
            s0 = 1.
            sT = 1. / self.parent_scale
            s = s0 * (1. - t/T) + sT * t/T
            # siblings shrink to children
            parent_xy = [0, 0]
            ci = self.get_current_room_sibling_index()
            for i, scene in enumerate(self.siblings_room_nodes.values()):
                z_offset = +floorraise
                xy, _, _, parent_xy = sibling_index_to_grid(i, ci, len(self.siblings_room_nodes.values()))
                scene.setScale(self.siblings_scale * s, self.siblings_scale * s, self.siblings_scale * s)
                scene.setPos(xy[0] * s, xy[1] * s, z_offset)
            # parents shrink to one of siblings (later add siblings)
            self.parent_room_node.setScale(self.parent_scale * s, self.parent_scale * s, self.parent_scale * s)
            self.parent_room_node.setPos(s * parent_xy[0], s * parent_xy[1], 0)
            # children shrink to grandchildren
            for i, scene in enumerate(self.children_room_nodes.values()):
                z_offset = 0
                x_separation_index = i - len(self.children_room_nodes.values()) // 2
                xy, _, _ = child_index_to_grid(i, len(self.children_room_nodes.values()))
                scene.setScale(self.children_scale * s, self.children_scale * s, self.children_scale * s)
                scene.setPos(s * xy[0], s * xy[1], z_offset)
            # scale player position in world
            t_player_pos = t0_player_pos * s
            self.player.node.setPos(t_player_pos[0], t_player_pos[1], t0_player_pos[2])
            t += globalClock.getDt()
            self.in_cutscene["t"] = t
            if t >= T:
                # current room is always at 0, but it's at some xy in parent. When we grow,
                # we'll need to move player to that xy
                t_player_pos = t0_player_pos * sT
                self.player.node.setPos(t_player_pos[0] - parent_xy[0] * sT, t_player_pos[1] - parent_xy[1] * sT, t0_player_pos[2])
                self.in_cutscene = None
                self.current_folder.pop(-1)
                self.regen_scenes_for_current_folder()
                return
        elif self.in_cutscene["name"] == "scale_down":
            # to scale down player, we scale up world
            t0_player_pos = self.in_cutscene["t0_player_pos"]
            to_enter = self.in_cutscene["child_to_enter"]
            T = self.in_cutscene["duration"]
            t = self.in_cutscene["t"]
            # scale factor (1 to 0.1)
            s0 = 1.
            sT = 1. / self.children_scale
            s = s0 * (1. - t/T) + sT * t/T
            # siblings become parents
            parent_xy = [0, 0]
            ci = self.get_current_room_sibling_index()
            for i, scene in enumerate(self.siblings_room_nodes.values()):
                z_offset = -floorraise
                xy, _, _, parent_xy = sibling_index_to_grid(i, ci, len(self.siblings_room_nodes.values()))
                scene.setScale(self.siblings_scale * s, self.siblings_scale * s, self.siblings_scale * s)
                scene.setPos(s * xy[0], s * xy[1], z_offset)
            # parents become grandparents (later disappear)
            self.parent_room_node.setScale(self.parent_scale * s, self.parent_scale * s, self.parent_scale * s)
            self.parent_room_node.setPos(s * parent_xy[0], s * parent_xy[1], 0)
            # children become siblings
            for i, (name, node) in enumerate(self.children_room_nodes.items()):
                z_offset = 0
                xy, _, _ = child_index_to_grid(i, len(self.children_room_nodes.values()))
                node.setScale(self.children_scale * s, self.children_scale * s, self.children_scale * s)
                node.setPos(s * xy[0], s * xy[1], z_offset)
                if name == to_enter:
                    child_xy = xy
            # scale player position in world
            t_player_pos = t0_player_pos * s
            self.player.node.setPos(t_player_pos[0], t_player_pos[1], t0_player_pos[2])
            t += globalClock.getDt()
            self.in_cutscene["t"] = t
            if t >= T:
                t_player_pos = t0_player_pos * sT
                # next room is at some xy in parent, but it's at 0 after shrinkage.
                self.player.node.setPos(t_player_pos[0] - child_xy[0] * sT, t_player_pos[1] - child_xy[1] * sT, t0_player_pos[2])
                self.current_folder.append(to_enter)
                self.in_cutscene = None
                self.regen_scenes_for_current_folder()
                return

    def game_loop(self, task):
        self.player.mouseUpdate()
        if self.in_cutscene is None:
            self.player.moveUpdate()
            self.player.jumpUpdate()
            self.closestChildUpdate()
        else:
            self.cutscene_update()
        return task.cont


class Player(object):
    """
        Player is the main actor in the fps game
    """
    speed = 50
    height = 1.8
    initialjumpvel = 5
    FORWARD = Vec3(0,2,0)
    BACK = Vec3(0,-1,0)
    LEFT = Vec3(-1,0,0)
    RIGHT = Vec3(1,0,0)
    STOP = Vec3(0)
    walk = STOP
    strafe = STOP
    boost = 1
    readyToJump = False
    zvel = 0
    terminalzvel = -10
    gravity = -10
    lensneardist = 1

    def __init__(self):
        """ inits the player """
        self.loadModel()
        self.setUpCamera()
        self.createCollisions()
        self.attachControls()

    def loadModel(self):
        """ make the nodepath for player """
        self.node = NodePath('player')
        self.node.reparentTo(render)
        self.node.setPos(0,5,5)
        self.node.setScale(.05)

    def setUpCamera(self):
        """ puts camera at the players node """
        pl =  base.cam.node().getLens()
        pl.setFov(70)
        base.cam.node().setLens(pl)
        base.camera.reparentTo(self.node)

    def createCollisions(self):
        """ create a collision solid and ray for the player """
        cn = CollisionNode('player')
#         cn.addSolid(CollisionSphere(0,0,0,3))
        solid = self.node.attachNewNode(cn)
        base.cTrav.addCollider(solid,base.pusher)
        base.pusher.addCollider(solid,self.node, base.drive.node())
        # init players floor collisions
        ray = CollisionRay()
        ray.setOrigin(0,0,0)
        ray.setDirection(0,0,-1)
        cn = CollisionNode('playerRay')
        cn.addSolid(ray)
        cn.setFromCollideMask(BitMask32.bit(0))
        cn.setIntoCollideMask(BitMask32.allOff())
        solid = self.node.attachNewNode(cn)
        self.nodeGroundHandler = CollisionHandlerQueue()
        base.cTrav.addCollider(solid, self.nodeGroundHandler)

    def attachControls(self):
        """ attach key events """
        base.accept( "space" , self.__setattr__,["readyToJump",True])
        base.accept( "space-up" , self.__setattr__,["readyToJump",False])
        base.accept( "s" , self.__setattr__,["walk",self.STOP] )
        base.accept( "w" , self.__setattr__,["walk",self.FORWARD])
        base.accept( "s" , self.__setattr__,["walk",self.BACK] )
        base.accept( "s-up" , self.__setattr__,["walk",self.STOP] )
        base.accept( "w-up" , self.__setattr__,["walk",self.STOP] )
        base.accept( "a" , self.__setattr__,["strafe",self.LEFT])
        base.accept( "d" , self.__setattr__,["strafe",self.RIGHT] )
        base.accept( "a-up" , self.__setattr__,["strafe",self.STOP] )
        base.accept( "d-up" , self.__setattr__,["strafe",self.STOP] )
        base.accept( "lshift-up" , self.__setattr__,["boost",1] )
        base.accept( "lshift" , self.__setattr__,["boost",10] )

    def mouseUpdate(self):
        """ this task updates the mouse """
        md = base.win.getPointer(0)
        x = md.getX()
        y = md.getY()
        if base.win.movePointer(0, base.win.getXSize()//2, base.win.getYSize()//2):
            self.node.setH(self.node.getH() -  (x - base.win.getXSize()//2)*0.1)
            base.camera.setP(base.camera.getP() - (y - base.win.getYSize()//2)*0.1)

    def moveUpdate(self):
        """ this task makes the player move """
        # move where the keys set it
        self.node.setPos(self.node,self.walk*globalClock.getDt()*self.speed*self.boost)
        self.node.setPos(self.node,self.strafe*globalClock.getDt()*self.speed)

    def jumpUpdate(self):
        """ this task simulates gravity and makes the player jump """
        # get the highest Z from the down casting ray
        floorZ = -100
        for i in range(self.nodeGroundHandler.getNumEntries()):
            entry = self.nodeGroundHandler.getEntry(i)
            z = entry.getSurfacePoint(render).getZ()
            if z > floorZ and entry.getIntoNode().getName() != "player":
                floorZ = z
        floorZ = 0
        floorPadding = self.height * 0.1
        feetZ = self.node.getZ() - self.height
        # feet above padded ground (floating)
        if floorZ + floorPadding < feetZ:
            # apply gravity
            if self.zvel > self.terminalzvel:
                self.zvel = self.zvel + self.gravity * globalClock.getDt()
        # feet below ground ->
        if floorZ > feetZ:
            self.zvel = 0
            self.node.setZ(floorZ+self.height)
        # feet below paddedground
        if floorZ + floorPadding > feetZ:
            # enable jump again
            if self.readyToJump:
#                 self.node.setZ(floorZ+floorPadding)
                self.zvel = self.initialjumpvel
#         print("{:.2f}, {:.2f}, {:.2f}, {:.2f}, {:.2f}".format(
#             self.node.getZ(), self.height, feetZ, floorZ, self.zvel))
        # apply velocity
        self.node.setZ(self.node.getZ()+self.zvel*globalClock.getDt())

FPS()
